/**
 *
 * Copyright (C) 1999-2000 Real-time Systems Group, University of Pennsylvania.
 *
 * Use of this file and the system it is part of is constrained by the
 * file COPYRIGHT in the root directory of this system.  You may, however,
 * make any modifications you wish to this file.
 *
 * Java files generated by running JavaCC on this file (or modified versions
 * of this file) may be used in exactly the same manner as Java files
 * generated from any grammar developed by you.
 *
 * This file contains the SADL grammar and the parser actions.  
 *
 */

options {
  JAVA_UNICODE_ESCAPE = true;
  STATIC = true;
}

PARSER_BEGIN(SadlParser)

package mac.steering.parser;

import java.io.*;
import java.util.*;
import mac.types.steeringTypes.*;

public class SadlParser {

  public static final String sadlID = "SADL Parser Version 0.1";

  static Hashtable symbolTable;
  static Hashtable aliasTable;
  static Vector exportedActions;
  static Vector definedActions;
  static Vector definedSyncActions;

  static String scriptID;
  static int numberOfActions;
  static int numberOfSyncActions;
  
  /* temporary containers for components of a composite name */
  static int[] dotPos, subTypes;
  static String className, objName;

  /* output for the generated injector class */
  static String injector;
  static FileOutputStream injstream;
  static PrintStream injdata;
  static final String injImport = "import mac.steering.Injector;\n" +
    "import java.util.Vector;\n";
  static final String injectorHeader1 = "public class ";
  static final String injectorHeader2 = " extends Injector\n{";
  static final String initInj1 = 
    "  public static void init( int portAddr ) {\n" +
    "    Injector.init(portAddr);\n" + 
    "    invoked = new boolean[";
  static final String initInj2 = "];\n" + 
    "    actionParams = new Object [";
  static final String initInj3 = "][];\n";
  static final String initInj4 = "  }";
  static public boolean error = false;
  static public SadlParser parser ; 
  static public FileInputStream fis; 
  public static void init() {
    parser.symbolTable = new Hashtable();
    parser.aliasTable = new Hashtable();
    parser.exportedActions = new Vector();
    parser.definedActions = new Vector();
    parser.definedSyncActions = new Vector();
    parser.numberOfActions = 0;
    parser.numberOfSyncActions = 0;
  }

    public static void outputs() {
      try {
	// output the actions for the instrumentor
	FileOutputStream fout = new FileOutputStream( "actions.out" );
	ObjectOutputStream objout = new ObjectOutputStream( fout );
	objout.writeObject( parser.scriptID );
	objout.writeObject( parser.definedActions );
	objout.writeObject( parser.definedSyncActions );
	objout.close();
	fout.close();

	// close the injector stream
	injdata.close();
	injstream.close();
      } catch( IOException ioe ) {
	System.err.println( ioe );
	error = true;
      }
    }

  public static void main(String args[]) {
    error = false;
    if (args.length == 0) {
      System.out.println(sadlID + ":  Reading from standard input . . .");
      parser = new SadlParser(System.in);
    } else if (args.length == 1) {
      System.out.println(sadlID + ":  Reading from file " + args[0] + " . . .");
      try {
        fis = new java.io.FileInputStream(args[0]);
        parser = new SadlParser(fis);
      } catch (java.io.FileNotFoundException e) {
        System.out.println(sadlID + ":  File " + args[0] + " not found.");
	error = true;
        return;
      }
    } else {
      error = true;
      System.out.println(sadlID + ":  Usage is one of:");
      System.out.println("         java SadlParser < inputfile");
      System.out.println("OR");
      System.out.println("         java SadlParser inputfile");
      return;
    }
    init();
    
    try {
      parser.SteeringScript();

      outputs();
    } catch( ParseException e ) {
      System.err.println( e );
      error = true;
    }
  }
}

PARSER_END(SadlParser)

/* This method adds an entry to the symbol table. */

JAVACODE
void addToSymbolTable( String name, CompositeName obj ) {

  if( symbolTable.containsKey(name) ) {
    System.err.println("Warning: variable " + name + " redeclared");
  } else {
    symbolTable.put( name, obj );
    System.out.println( "adding " + name );
  }
}

/* This method performs symbol table lookup */

JAVACODE
CompositeName lookupSymbolTable( String name ) {

  if( symbolTable.containsKey(name) ) {
    return (CompositeName)symbolTable.get( name );
  } else {
    System.err.println("Warning: variable " + name + " undefined");
    return null;
  }
}

// This method checks if the string is present in the list of strings and
// returns its index in the list.  If it is not there, the string is added
// to the list.

JAVACODE
int getIndex( Vector stringList, String s ) {
  int index = stringList.indexOf( s );
  if( index == -1 ) {
    // not in the list, add 
    stringList.add( s );
    return stringList.size() - 1;
  } else 
    return index;
}

/* Parser stuff begins */
/* error_skipto skips tokens until it reaches 'kind'. kind remains in the
 * lexical stream */

JAVACODE
void error_skipto(int kind) {
  ParseException e = generateParseException();
  System.out.println(e.toString());
  Token t;
  while (getToken(1).kind != kind) {
    t = getNextToken();
  } 
}

/* WHITE SPACE */

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/* COMMENTS */

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

/* RESERVED WORDS AND LITERALS (JAVA RELATED) */

TOKEN :
{
  < BOOLEAN: "boolean" >
| < BYTE: "byte" >
| < CHAR: "char" >
| < CLASS: "class" >
| < CONST: "const" >
| < DOUBLE: "double" >
| < FALSE: "false" >
| < FLOAT: "float" >
| < INSTANCEOF: "instanceof" >
| < INT: "int" >
| < LONG: "long" >
| < NULL: "null" >
| < SHORT: "short" >
| < TRUE: "true" >
| < VOID: "void" >
| <STATIC:"static">
}

/* CASE INSENSITIVE RESERVE WORDS (SADL SPECIFIC) */

TOKEN [IGNORE_CASE] :
{
  < STOBJ: "Steered Objects" | "StObj" >
| < STACT: "Steering Action" | "StAct" >
| < SYNC_STACT: "Steering SyncAction" | "StSyncAct" >
| < STSCR: "Steering Script" | "StScr" >
| < BEFORE: "before" >
| < AFTER: "after" >
| < READ: "read" >
| < WRITE: "write" >
| < CALL: "call" >
| < END: "end" >
}

/* LITERALS */

TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

/* IDENTIFIERS */

TOKEN :
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

/* SEPARATORS */

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COLON: ":" >
| < COMMA: "," >
| < DOT: "." >
}

/****************************************
 *       SADL GRAMMAR STARTS HERE       *
 ****************************************/

void SteeringScript() :
{ Token t; }
{
  <STSCR> t = <IDENTIFIER> 
  { 
    scriptID = t.image; 
    /* generate injector file name and try to open it */
    injector = scriptID + "_Injector";
    try {
      injstream = new FileOutputStream( injector + ".java" );
      injdata = new PrintStream( injstream );
      injdata.println( injImport );
      injdata.println( injectorHeader1 + injector + injectorHeader2 );
    } catch( IOException ioe ) {
      System.out.println( "Cannot generate Injector class " + injector + 
			   ": " + ioe );
      throw( new ParseException() );
    }
  }
  SteeredObjects() Actions() SyncActions() <END>
  {
    injdata.println( "};" );
  }
}

void SteeredObjects() :
{}
{ 
  <STOBJ> TypedObjects() ( LOOKAHEAD(2) ";" TypedObjects() )* [";"]
}

void TypedObjects() :
{ String type, name; 
  CompositeName bar; }
{ 
  type = Type() name = ObjectDeclarator() 
    { 
      bar = new CompositeName( objName, type, className, dotPos, subTypes );
      addToSymbolTable( name, bar ); }
    ( "," name = ObjectDeclarator() 
      { 
	bar = new CompositeName( objName, type, className, dotPos, subTypes );
	addToSymbolTable( name, bar ); 
      } 
    )*
}

void Actions() :
{ numberOfActions = 0; }
{ 
  (SteeringActionDef( numberOfActions++ ) ";" ) *
  {
    /* produce the injector init() method */
    injdata.println( initInj1 + numberOfActions + initInj2 + numberOfActions +
		     initInj3 );
    Enumeration act = definedActions.elements();
    int i = 0;
    while( act.hasMoreElements() ) {
      SteeringAction sa = (SteeringAction)act.nextElement();
      injdata.println( "    actionsDefined.put( \"" + sa.getName() + 
		       "\", new Integer(" + i++ + ") );" );
    }
    injdata.println( initInj4 );
  }
}
void SyncActions() :
{ numberOfSyncActions = 0; 
}
{ 
  (SteeringSyncActionDef( numberOfSyncActions++ ) ";" ) *
}

void SteeringActionDef( int actNum ) :
{ 
  Vector statements = new Vector();
  Vector locations = null;
  SteeringLocation sl;
  Token t;
}
{
  <STACT> t = <IDENTIFIER> "="
     ( statements = Statements( t.image )
     |
     "{" statements = Statements( t.image ) "}" )
     {
       /* generate the test method */
       injdata.print( "  public static synchronized boolean " );
       injdata.println( "test_" + t.image + "() {" );
       injdata.println( "    boolean tmp = invoked[" + actNum + "];" );
       injdata.println( "    invoked[" + actNum + "] = false;" );
       injdata.println( "    return tmp;\n  }" );
     }
     sl = SteeringLocationDef()
     {
       locations = new Vector();
       locations.add( sl );
       definedActions.add(new SteeringAction(t.image, statements, locations));
     } 
}

void SteeringSyncActionDef( int actNum ) :
{ 
  Vector statements = new Vector();
  Object statement = null;
  SteeringLocation sl;
  Token t;
}
{
  ( <SYNC_STACT> t = <IDENTIFIER> "("   [Parameter() ("," Parameter())*] ")" 
  "{" 
    ((LOOKAHEAD(2) statement=Assignment()| statement = Call()) ";"
    {statements.add(statement); } 
    )* 
  "}" 
  sl = SteeringLocationDef()
  { 
    definedSyncActions.add(new
    SteeringSyncAction(t.image,statements,sl));
  })
}

AssignStatement Assignment(): 
{ 
    Token t=null, t1 = null; 
    CallStatement c = null; 
    Object statement = null;
    boolean staticVar=false;
}
{
    
    [<STATIC> { staticVar = true;}] 
    t=<IDENTIFIER>  "=" (LOOKAHEAD(2) c=Call() | t1=<IDENTIFIER>) 
    {  return new AssignStatement(
	t.image, c, (t1 == null ? null : t1.image), staticVar);} 
}


CallStatement Call():
{
    Token className,methodName,t;
    boolean staticCall=false;
    Vector parameters = new Vector();
    String[] paramNames = null;
    int numParameters=0;}
{
    [<STATIC> { staticCall = true;}] 
    className = <IDENTIFIER> "." methodName = <IDENTIFIER>  
    "(" [ t=<IDENTIFIER> {parameters.add(t.image);}
        ("," t=<IDENTIFIER> {parameters.add(t.image);})* ]    
    ")" 
    {
	numParameters = parameters.size();
	paramNames = new String[numParameters];
	for(int i=0; i < numParameters; i++) 
	    paramNames[i] = (String)(parameters.elementAt(i));
	return new CallStatement(
	className.image, methodName.image, paramNames, staticCall);
    }
}

void Parameter(): { Token t = null;}
{
    PrimitiveType() t=<IDENTIFIER> 
}

Vector Statements( String actName ) : 
{
  Vector statements = new Vector();
  SteeringStatement ss;
  int stNum = 1;
}
{
  ss = SteeringStatementDef( actName, stNum++ ) { statements.add( ss ); }
  ( LOOKAHEAD(2)
    ";" ss = SteeringStatementDef( actName, stNum++ ) { statements.add( ss ); }
  )* 
  [";"] { return statements; }
}

SteeringStatement SteeringStatementDef( String actName, int stNum ) :
{
  String name;
  String text;
  Vector parameters = new Vector(), stringParameters = new Vector();
  SteeringStatement ss;
  CompositeName target = null;
}
{
  ( name = ObjectName() "=" text = Expression(stringParameters)
    { target = lookupSymbolTable(name); }
  ) | ( <CALL> text = Expression( stringParameters ) )
  {     
     // generate the injector method
     injdata.print( "  public static " );
     if( target == null ) 
       injdata.print( "void " );
     else
       injdata.print( target.getJavaType() + " " );
     injdata.print( "invoke_" + actName + stNum + "(" );

     // construct the parameter variables and emit injector parameters
     Iterator parIter = stringParameters.iterator();
     boolean first = true;
     int parNum = 0;
     while( parIter.hasNext() ) {
       String parkey = (String)parIter.next();
       CompositeName parName = lookupSymbolTable( parkey );
       if( parName != null ) {
	 parameters.add( parName );
	 if( !first ) injdata.print( ", " );
	 else injdata.print( " " );
	 first = false;
	 injdata.print( parName.getJavaType() + " arg" + parNum++ );
       } else  throw( 
	 new ParseException( "undefined name in a statement: " + parkey ) );
     }
     injdata.println( " )\n  {" );
     if( target != null ) injdata.print( "    return " );
     else injdata.print( "    " );
     injdata.println( text + ";" );
     injdata.println( "  }" );
     return new SteeringStatement( target, parameters ); 
  }
}

SteeringLocation SteeringLocationDef() :
{ String name; 
  int pos, typ;
  SteeringLocation sl;
}
{
   ( <BEFORE> { pos = SteeringLocation.BEFORE; } | 
     <AFTER> { pos = SteeringLocation.AFTER; } ) 
   ( <READ> { typ = SteeringLocation.READ; } | 
     <WRITE> { typ = SteeringLocation.WRITE; } | 
     <CALL> { typ = SteeringLocation.CALL; } ) 
   name = ObjectName()
   { 
     CompositeName obj = lookupSymbolTable(name);
     if( obj != null )
       sl = new SteeringLocation( pos, typ, obj );
     else throw( new ParseException( "undefined location name " + name ) );
     return sl;
   }
}

/***************************************************************************
 * Name handling productions
 * A name can be declared with array dimensions and formal parameters, 
 * and then used in two ways, dynamically and statically:
 * - dynamically, as a part of a steering statement, with array expressions 
 *   and actual parameters;
 * - statically, in an action placement - not as an expression, but to
 *   identify a place in the code.
 * ObjectDeclarator() and ObjectFullName() provide for declarations
 * ObjectName() is a static reference
 * ObjectNameRef is a dynamic reference
 ***************************************************************************/

String ObjectName() :
{ String name;
  Token t; }
{
  ( LOOKAHEAD( ObjectLookahead() ) name = ObjectFullName()
  | t = <IDENTIFIER>  
    { name = t.image; 
      String fullName = (String)aliasTable.get(name);
      if( fullName != null ) name = fullName;
    } )
  { return name; }
}

String ObjectDeclarator() :
{ String name = "";
  Token t = null; }
{
  [ LOOKAHEAD(2) t = <IDENTIFIER> "<-" ] name = ObjectFullName()
  {if (t != null) 
     aliasTable.put(t.image,name);
   return name;}
}

String ObjectFullName() :
{ String name, subName;
  Vector vDotPos = new Vector(), vSubTypes = new Vector();
  boolean prevCall;
  int dotCount = 0, pos = 0; }
{ 
  className = Name() ":" 
  { System.out.print( "[ " ); }
  ( LOOKAHEAD( MethodLookahead() ) 
    name = SimpleMethodDeclarator()  
    { vSubTypes.add( new Integer( CompositeName.METHOD ) ); prevCall = true; }
  | name = VariableDeclaratorId() 
    { vSubTypes.add( new Integer( CompositeName.FIELD ) ); prevCall = false; } )
  ( "." { name += "."; vDotPos.add( new Integer( name.length() ) ); System.out.print( name.length() + " " );}
    ( LOOKAHEAD( MethodLookahead() ) 
      subName = SimpleMethodDeclarator() 
      { vSubTypes.add( new Integer( CompositeName.METHOD ) ); prevCall = true; }
    | subName = VariableDeclaratorId() 
      { if( prevCall ) 
	  vSubTypes.add( new Integer( CompositeName.LOCAL ) );
	else
	  vSubTypes.add( new Integer( CompositeName.FIELD ) );
	prevCall = false;
       }
    ) 
    { name += subName; }
  )*
  { vDotPos.add( new Integer( name.length() ) ); System.out.print( name.length() + " " );}
  {  System.out.println( "]" ); }
  { /* convert the vectors to arrays and make CompositeName */
    dotPos = new int[vDotPos.size()+1];
    subTypes = new int[vSubTypes.size()+1];
    dotPos[0] = 0;
    Enumeration st = vSubTypes.elements();
    Enumeration dp = vDotPos.elements();
    for( int i = 1; i < dotPos.length; i++ ) {
      subTypes[i] = ((Integer)st.nextElement()).intValue();
      dotPos[i] = ((Integer)dp.nextElement()).intValue();
    }
    System.out.print( "[ " );
    for( int i = 0; i < subTypes.length; i++ ) 
      System.out.print( subTypes[i] + " " );
    System.out.println( "]" );
    if( vDotPos.size() == 1 ) 
      subTypes[0] = subTypes[1];
    else if( (vDotPos.size() == 2) && (subTypes[2]==CompositeName.LOCAL) )
      subTypes[0] = CompositeName.LOCAL;
    else
      subTypes[0] = CompositeName.RELATIVE;
    objName = name;
    System.out.println( "type set to " + subTypes[0] );
    return className+":"+name; }
}

String ObjectNameRef( Vector parameters ) :
{ String name, text; }
{ 
  className = Name() ":" 
  { objName = ""; }
  ( LOOKAHEAD( MethodLookahead() ) 
    text = SimpleMethod( parameters )  
  | text = VariableId( parameters ) )
  ( "." { objName += "."; }
    ( LOOKAHEAD( MethodLookahead() ) 
      text = SimpleMethod( parameters ) 
    | text = VariableId( parameters ) ) 
  )*
  { name = "arg" + getIndex( parameters, className+":"+objName ); }
  { return name+text; }
}

String SimpleMethodDeclarator() :
{ String s, name = ""; 
  Token t; }
{
  t = <IDENTIFIER> {name = t.image;} s = FormalParameters() 
  {name += s; return name;} 
}

String FormalParameters() :
{ String s, name = ""; }
{
  "(" {name = "(";} [ s = Type() {name += s;}
                        ( "," {name += ",";} s = Type() {name += s;} )* ] 
   ")" {name += ")"; return name;}
}

// VariableId and SimpleMethod are components of a name referenced in an
// expression.  text is the string to be included into an expression.  
// The name itself is accumulated in global variable objName

String VariableId( Vector parameters ) :
{ String text = "", indices;
  Token t; }
{
  t = <IDENTIFIER> { objName += t.image; } 
  ( "[" { text += "["; }
    indices = Expression( parameters ) { text += indices; }
    "]" { text += "]"; objName += "[]"; } )*
  { return text; }
}

String SimpleMethod( Vector parameters ) :
{ String s; 
  Token t; }
{
  t = <IDENTIFIER> { objName += t.image + "()"; } s = Arguments( parameters ) 
  { return s; } 
}

void MethodLookahead() :
{}
{
  <IDENTIFIER> "("
}

void ObjectLookahead() :
{}
{
  <IDENTIFIER> ( "." | ":" )
}

/*****************************************
 * THE JAVA LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

String VariableDeclaratorId() :
{ String name = "";
  Token t; }
{
  t = <IDENTIFIER> {name = t.image;} ( LOOKAHEAD(2) "[" "]" {name += "[]";} )*
  {return name;}
}

/*
 * Type, name and expression syntax follows.
 */

String Type() :
{ String name = ""; }
{
  ( name = PrimitiveType() | name = Name() ) ( "[" "]" {name+="[]";} )* 
  {return name;}
}

String PrimitiveType() :
{}
{
  ( "boolean" {return "boolean";} )
|
  ( "char" {return "char";} )
|
  ( "byte" {return "byte";} )
|
  ( "short" {return "short";} )
|
  ( "int" {return "int";} )
|
  ( "long" {return "long";} )
|
  ( "float" {return "float";} )
|
  ( "double" {return "double";} )
}

String ResultType() :
{ String name = ""; }
{
  ( "void" {return "void";} )
|
  ( name = Type() {return name;} )
}

String Name() :
{ String name = ""; 
  Token t; }
{
  t = <IDENTIFIER> {name += t.image;}
  ( "." ( t = <IDENTIFIER> ) {name+= ("." + t.image);}
  )*
  {return name;}
}

void NameList() :
{}
{
  Name()
  ( "," Name()
  )*
}


/*
 * Expression syntax follows.
 */

String Expression( Vector parameters ) :
{ String text; }
{
  text = ConditionalExpression( parameters )
  { return text; }
}

String ConditionalExpression( Vector parameters ) :
{ String text, addtext; }
{
  text = ConditionalOrExpression( parameters ) 
  [ "?" addtext = Expression( parameters ) { text += " ? " + addtext; } 
    ":" addtext = ConditionalExpression( parameters ) 
    { text += " : " + addtext; } ]
  { return text; }
}

String ConditionalOrExpression( Vector parameters ) :
{ String text, addtext; }
{
  ( text = ConditionalAndExpression( parameters ) 
    ( "||" addtext = ConditionalAndExpression( parameters ) 
    { text += " || " + addtext; } )* )
  { return text; }
}

String ConditionalAndExpression( Vector parameters ) :
{ String text, addtext; }
{
  ( text = InclusiveOrExpression( parameters ) 
    ( "&&" addtext = InclusiveOrExpression( parameters )
      { text += " && " + addtext; } )* )
  { return text; }
}

String InclusiveOrExpression( Vector parameters ) :
{ String text, addtext; }
{
  ( text = ExclusiveOrExpression( parameters ) 
    ( "|" addtext = ExclusiveOrExpression( parameters )
      { text += " | " + addtext; } )* )
  { return text; }
}

String ExclusiveOrExpression( Vector parameters ) :
{ String text, addtext; }
{
  ( text = AndExpression( parameters ) 
    ( "^" addtext = AndExpression( parameters )
      { text += " ^ " + addtext; } )* )
  { return text; }
} 

String AndExpression( Vector parameters ) :
{ String text, addtext; }
{
  ( text = EqualityExpression( parameters ) 
    ( "&" addtext = EqualityExpression( parameters )
      { text += " & " + addtext; } )* )
  { return text; }
}

String EqualityExpression( Vector parameters ) :
{ String text, addtext; }
{
  text = InstanceOfExpression( parameters ) 
  ( ( "==" { text += " == "; } | "!=" { text += " != "; } ) 
  addtext = InstanceOfExpression( parameters ) { text += addtext; })*
  { return text; }
}

String InstanceOfExpression( Vector parameters ) :
{ String text, addtext; }
{
  text = RelationalExpression( parameters ) 
  [ "instanceof" addtext = Type() { text += " instanceof " + addtext; } ]
  { return text; }
}

String RelationalExpression( Vector parameters ) :
{ String text, addtext; }
{
  text = ShiftExpression( parameters ) 
  ( ( "<" { text += " < "; } | ">" { text += " > "; } 
    | "<=" { text += " <= "; } | ">=" { text += " >= "; } ) 
  addtext = ShiftExpression( parameters ) { text += addtext;} )* 
  { return text; }
}

String ShiftExpression( Vector parameters ) :
{ String text, addtext; }
{
  text = AdditiveExpression( parameters ) 
  ( ( "<<" { text += " << "; } | ">>" { text += " >> "; } | 
      ">>>" { text += " >>> "; } ) 
    addtext = AdditiveExpression( parameters ) { text += addtext;} )*
  { return text; }
}

String AdditiveExpression( Vector parameters ) :
{ String text, addtext; }
{
  text = MultiplicativeExpression( parameters ) 
  ( ( "+" { text += " + "; } | "-" { text += " - "; } ) 
    addtext = MultiplicativeExpression( parameters ) { text += addtext;} )*
  { return text; }
}

String MultiplicativeExpression( Vector parameters ) :
{ String text, addtext; }
{
  text = UnaryExpression( parameters ) 
  ( ( "*" { text += " + "; } | "/" { text += " + "; } | "%" { text += " + "; }) 
  addtext = UnaryExpression( parameters ) { text += addtext;} )*
  { return text; }
}

String UnaryExpression( Vector parameters ) :
{ String text, addtext; }
{
  ( ( "+" { text = " +"; } | "-" { text = " -"; } ) 
    addtext = UnaryExpression( parameters ) { text += addtext; }
    |
    text = PreIncrementExpression( parameters )
    |
    text = PreDecrementExpression( parameters )
    |
    text = UnaryExpressionNotPlusMinus( parameters )
  )
  { return text; }
}

String PreIncrementExpression( Vector parameters ) :
{ String text = "++", addtext; }
{
  "++" addtext = PrimaryExpression( parameters ) { text += addtext; }
  { return text; }
}

String PreDecrementExpression( Vector parameters ) :
{ String text = "--", addtext; }
{
  "--" addtext = PrimaryExpression( parameters ) { text += addtext; }
  { return text; }
}

String UnaryExpressionNotPlusMinus( Vector parameters ) :
{ String text, addtext; }
{
  (
    ( "~" { text = "~"; } | "!" { text = "!"; } ) 
    addtext = UnaryExpression( parameters ) { text += addtext; }
  |
    LOOKAHEAD( CastLookahead() )
    text = CastExpression( parameters )
  |
    text = PostfixExpression( parameters )
  )
  { return text; }
}

// This production is to determine lookahead only.  The LOOKAHEAD specifications
// below are not used, but they are there just to indicate that we know about
// this.
void CastLookahead() :
{}
{
  LOOKAHEAD(2)
  "(" PrimitiveType()
|
  LOOKAHEAD("(" Name() "[")
  "(" Name() "[" "]"
|
  "(" Name() ")" ( "~" | "!" | "(" | <IDENTIFIER> | "this" | "super" | "new" | Literal() )
}

String PostfixExpression( Vector parameters ) :
{ String text; }
{
  text = PrimaryExpression( parameters ) 
  [ "++" { text += "++"; } | "--" { text += "++"; } ]
  { return text; }
}

String CastExpression( Vector parameters ) :
{ String text, addtext; }
{
  (
    LOOKAHEAD(2)
    "(" text = PrimitiveType() ( "[" "]" { text += "[]"; } )* ")" 
    addtext = UnaryExpression( parameters ) { text += addtext; }
    |
    "(" text = Name() ( "[" "]" { text += "[]"; } )* ")" 
    addtext = UnaryExpressionNotPlusMinus( parameters ) { text += addtext; }
  )
  { return text; }
}

// we have to be careful not to  add another "." to a ref through primary
// suffix, but (ObjectNameRef).<id> is fine

String PrimaryExpression( Vector parameters ) :
{ String text, addtext; }
{
  (
    text = ObjectNameRef( parameters ) 
    |
    text = Literal()
    |
    text = PrimaryPrefix( parameters ) 
    ( addtext = PrimarySuffix( parameters ) { text += addtext; } )*
    |
    text = AllocationExpression( parameters )
  )
  { return text; }
}

String PrimaryPrefix( Vector parameters ) :
{ String text, addtext;
  Token t; }
{
  (
    "(" addtext = Expression( parameters ) ")" { text = "(" + addtext + ")"; }
  )
  { return text; }
}

String PrimarySuffix( Vector parameters ) :
{ String text, addtext;
  Token t; }
{
  (
    "[" addtext = Expression( parameters ) "]"{ text = "[" + addtext + "]"; }
    |
    "." t = <IDENTIFIER> { text = "." + t.image; }
    |
    text = Arguments( parameters )
  )
  { return text; }
}

String Literal() :
{ String text; Token t; }
{
  t = <INTEGER_LITERAL> { return t.image; }
|
  t = <FLOATING_POINT_LITERAL> { return t.image; }
|
  t = <CHARACTER_LITERAL> { return t.image; }
|
  t = <STRING_LITERAL> { return t.image; }
|
  text = BooleanLiteral() { return text; }
|
  text = NullLiteral() { return text; }
}

String BooleanLiteral() :
{}
{
  "true" { return "true"; }
|
  "false" { return "false"; }
}

String NullLiteral() :
{}
{
  "null" { return "null"; }
}

String Arguments( Vector parameters ) :
{ String text = "(", addtext; }
{
  "(" [ addtext = ArgumentList( parameters ) { text += addtext; } ] ")" 
  { text += ")"; }
  { return text; }
}

String ArgumentList( Vector parameters ) :
{ String text, addtext; }
{
  text = Expression( parameters ) 
  ( "," addtext = Expression( parameters ) { text += ", " + addtext; } )*
  { return text; }
}

String AllocationExpression( Vector parameters ) :
{ String text = "new ", addtext; }
{
  (
    LOOKAHEAD(2)
    "new" addtext = PrimitiveType() { text += addtext; }
    addtext = ArrayDimensions( parameters ) { text += addtext; }
    |
    "new" addtext = Name() { text += addtext; } 
    ( addtext = Arguments( parameters ) | 
      addtext = ArrayDimensions( parameters ) ) { text += addtext; }
  )
  { return text; }
}

/*
 * The second LOOKAHEAD specification below is to parse to PrimarySuffix
 * if there is an expression between the "[...]".
 */
String ArrayDimensions( Vector parameters ) :
{ String text, addtext; }
{
  ( LOOKAHEAD(2) "[" addtext = Expression( parameters ) "]" 
  { text = "[" + addtext + "]"; } )+
  ( LOOKAHEAD(2) "[" "]" { text += "[]"; } )*
  { return text; }
}
